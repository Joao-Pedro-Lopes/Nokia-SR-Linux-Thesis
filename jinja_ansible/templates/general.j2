# Jinja template
---
- name: Full configuration -- interfaces, eBGP and iBGP
  hosts: {{ host_name }}
  gather_facts: false
  tasks:
    {% for interface in interfaces %}
    - name: Set p2p interface configuration - {{ node }}
      nokia.srlinux.config:
        update:
          - path: /interface[name={{ interface['interface-name'] }}]
            value:
              admin-state: enable
              description: "interface description set with Ansible"
          - path: /interface[name={{ interface['interface-name'] }}]/subinterface[index=0]
            value:
              admin-state: enable
              description: "subinterface description set with Ansible"
          - path: /interface[name={{ interface['interface-name'] }}]/subinterface[index=0]/ipv4
            value:
              admin-state: enable
          - path: /interface[name={{ interface['interface-name'] }}]/subinterface[index=0]/ipv4/address[ip-prefix={{ interface['ip-address-p2p'] }}]
          - path: /network-instance[name=default]/interface[name={{ interface['interface-name'] }}.0]

      register: set_response_p2p_{{ loop.index }}

    - debug:
        var: set_response_p2p_{{ loop.index }}
    {% endfor %}
    - name: Set loopback interface configuration - {{ node }}
      nokia.srlinux.config:
        update:
          - path: /interface[name=system0]
            value:
              admin-state: enable
              description: "interface description set with Ansible"
          - path: /interface[name=system0]/subinterface[index=0]
            value:
              admin-state: enable
              description: "subinterface description set with Ansible"
          - path: /interface[name=system0]/subinterface[index=0]/ipv4
            value:
              admin-state: enable
          - path: /interface[name=system0]/subinterface[index=0]/ipv4/address[ip-prefix={{ ip_address_loopback }}]
          - path: /network-instance[name=default]/interface[name=system0.0]

      register: set_response_loopback

    - debug:
        var: set_response_loopback
    
    - name: Set routing policy - {{ node }}
      nokia.srlinux.config:
        update:
          - path: /routing-policy/policy[name=all]/default-action
            value:
              policy-result: accept

      register: set_response_routing_policy_ebgp

    - debug:
        var: set_response_routing_policy_ebgp
    
    - name: Set protocol eBGP - {{ node }}
      nokia.srlinux.config:
        update:
          - path: /network-instance[name=default]/protocols/bgp
            value:
              admin-state: enable
              autonomous-system: {{ ebgp['autonomous-system'] }}
              router-id: {{ ebgp['router-id'] }}
          - path: /network-instance[name=default]/protocols/bgp/group[group-name=eBGP-underlay]  
            value:
              admin-state: enable
              export-policy: all
              import-policy: all
          - path: /network-instance[name=default]/protocols/bgp/afi-safi[afi-safi-name=ipv4-unicast]
            value:
              admin-state: enable
          {% for neighbor in neighbors_ebgp %}- path: /network-instance[name=default]/protocols/bgp/neighbor[peer-address={{ neighbor['peer-address'] }}] 
            value:
              admin-state: enable
              peer-as: {{ neighbor['peer-as'] }}
              peer-group: eBGP-underlay
          {% endfor %}
      register: set_response_ebgp

    - debug:
        var: set_response_ebgp

    - name: Set protocol iBGP - {{ node }}
      nokia.srlinux.config:
        update:
          - path: /network-instance[name=default]/protocols/bgp/group[group-name=iBGP-overlay]
            value:
              admin-state: enable
              export-policy: all
              import-policy: all
          - path: /network-instance[name=default]/protocols/bgp/group[group-name=iBGP-overlay]/afi-safi[afi-safi-name=ipv4-unicast]
            value:
              admin-state: disable
          - path: /network-instance[name=default]/protocols/bgp/group[group-name=iBGP-overlay]/afi-safi[afi-safi-name=evpn]
            value:
              admin-state: enable
          - path: /network-instance[name=default]/protocols/bgp/group[group-name=iBGP-overlay]/local-as
            value:
              as-number: {{ ibgp['as-number'] }}
          {% for neighbor in neighbors_ibgp %}
          - path: /network-instance[name=default]/protocols/bgp/neighbor[peer-address={{ neighbor['peer-address'] }}] 
            value:
              admin-state: enable
              peer-as: {{ neighbor['peer-as'] }}
              peer-group: iBGP-overlay
          - path: /network-instance[name=default]/protocols/bgp/neighbor[peer-address={{ neighbor['peer-address'] }}]/transport
            value:
              local-address: {{ neighbor['local-address'] }}
          {% endfor %}
      register: set_response_ibgp

    - debug:
        var: set_response_ibgp
    
    {# ctl+k+c to comment/uncomment #}
    {# - name: Set MAC-VRF access interface configuration - {{ node }}
      nokia.srlinux.config:
        update:
          - path: /interface[name={{ interface_mac_vrf['interface-name'] }}]
            value:
              vlan-tagging: true
          - path: /interface[name={{ interface_mac_vrf['interface-name'] }}]/subinterface[index=0]
            value:
              type: bridged
              admin-state: enable
          - path: /interface[name={{ interface_mac_vrf['interface-name'] }}]/subinterface[index=0]/vlan/encap/untagged

      register: set_response_access_interface_mac_vrf

    - debug:
        var: set_response_access_interface_mac_vrf

    - name: Set MAC-VRF Tunnel/VXLAN interface configuration - {{ node }}
      nokia.srlinux.config:
        update:
          - path: /tunnel-interface[name={{ vxlan_name }}]/vxlan-interface[index={{ vxlan_interface }}]
            value:
              type: bridged
          - path: /tunnel-interface[name={{ vxlan_name }}]/vxlan-interface[index={{ vxlan_interface }}]/ingress
            value:
              vni: {{ vni }}

      register: set_response_tunnel_vxlan_interface_mac_vrf

    - debug:
        var: set_response_tunnel_vxlan_interface_mac_vrf
    
    - name: Set MAC-VRF network-instance - {{ node }}
      nokia.srlinux.config:
        update:
          - path: /network-instance[name={{ vrf_name }}]
            value:
              admin-state: enable
              type: mac-vrf
          - path: /network-instance[name={{ vrf_name }}]/interface[name={{ interface_mac_vrf['interface-name'] }}.0]
          - path: /network-instance[name={{ vrf_name }}]/vxlan-interface[name={{ vxlan_name ~ '.' ~ vxlan_interface }}]

          - path: /network-instance[name={{ vrf_name }}]/protocols/bgp-evpn/bgp-instance[id={{ vxlan_interface }}]
            value:
              admin-state: enable
              vxlan-interface: {{ vxlan_name ~ '.' ~ vxlan_interface }}
              evi: 111
          - path: /network-instance[name={{ vrf_name }}]/protocols/bgp-vpn/bgp-instance[id={{ vxlan_interface }}]/route-target
            value:
              export-rt: target:100:111
              import-rt: target:100:111

      register: set_response_network_instance_mac_vrf

    - debug:
        var: set_response_network_instance_mac_vrf #}